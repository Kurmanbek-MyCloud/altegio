<?php
/**
 * Webhook handler for Altegio API - Financial Transactions
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–æ–≤ –¥–ª—è API Altegio - –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 */

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏
$config = [
    'webhook_secret' => 'YOUR_WEBHOOK_SECRET', // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
    'log_file' => 'webhook_log.txt',
    'debug' => true
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
function logMessage($message) {
    global $config;
    $timestamp = date('Y-m-d H:i:s');
    $logEntry = "[$timestamp] $message" . PHP_EOL;
    
    if ($config['debug']) {
        echo $logEntry;
    }
    
    file_put_contents($config['log_file'], $logEntry, FILE_APPEND | LOCK_EX);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
function sendResponse($status, $message = '') {
    http_response_code($status);
    header('Content-Type: application/json');
    echo json_encode(['status' => $status, 'message' => $message]);
    exit;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–∞ –∑–∞–ø—Ä–æ—Å–∞
if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
    logMessage('Invalid request method: ' . $_SERVER['REQUEST_METHOD']);
    sendResponse(405, 'Method not allowed');
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
$input = file_get_contents('php://input');
$headers = getallheaders();

logMessage('Received webhook request');
logMessage('Headers: ' . json_encode($headers));
logMessage('Body: ' . $input);

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö
if (empty($input)) {
    logMessage('Empty request body');
    sendResponse(400, 'Empty request body');
}

// –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ JSON
$data = json_decode($input, true);
if (json_last_error() !== JSON_ERROR_NONE) {
    logMessage('Invalid JSON: ' . json_last_error_msg());
    sendResponse(400, 'Invalid JSON');
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –≤–µ–±—Ö—É–∫–æ–≤ Altegio
logMessage("Processing Altegio webhook");

try {
    // –§–æ—Ä–º–∞—Ç 1: –°–æ–±—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (uninstall, install)
    if (isset($data['event'])) {
        handleAppEvent($data);
    }
    // –§–æ—Ä–º–∞—Ç 2: –°–æ–±—ã—Ç–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ (record, visit, client)
    elseif (isset($data['resource']) && isset($data['status'])) {
        handleResourceEvent($data);
    }
    // –§–æ—Ä–º–∞—Ç 3: –ù–∞—à –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    elseif (isset($data['event_type']) && isset($data['data'])) {
        handleCustomEvent($data);
    }
    else {
        logMessage("Unknown webhook format: " . json_encode($data));
        sendResponse(400, 'Unknown webhook format');
    }
    
    logMessage("Webhook processed successfully");
    sendResponse(200, 'Webhook processed successfully');
    
} catch (Exception $e) {
    logMessage('Error processing webhook: ' . $e->getMessage());
    sendResponse(500, 'Internal server error');
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
function handleAppEvent($data) {
    $event = $data['event'] ?? 'unknown';
    logMessage("App event: $event");
    
    switch ($event) {
        case 'uninstall':
            logMessage('Application uninstalled from salon: ' . ($data['salon_id'] ?? 'N/A'));
            sendNotification("‚ùå –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ", [
                'ID —Å–∞–ª–æ–Ω–∞' => $data['salon_id'] ?? 'N/A',
                'ID –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è' => $data['application_id'] ?? 'N/A'
            ]);
            break;
            
        case 'install':
            logMessage('Application installed to salon: ' . ($data['salon_id'] ?? 'N/A'));
            sendNotification("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ", [
                'ID —Å–∞–ª–æ–Ω–∞' => $data['salon_id'] ?? 'N/A',
                'ID –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è' => $data['application_id'] ?? 'N/A'
            ]);
            break;
            
        default:
            logMessage("Unknown app event: $event");
            break;
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π —Ä–µ—Å—É—Ä—Å–æ–≤
 */
function handleResourceEvent($data) {
    $resource = $data['resource'] ?? 'unknown';
    $status = $data['status'] ?? 'unknown';
    $resourceId = $data['resource_id'] ?? 'N/A';
    
    logMessage("Resource event: $resource.$status (ID: $resourceId)");
    
    switch ($resource) {
        case 'record':
            handleRecordEvent($data);
            break;
            
        case 'visit':
            handleVisitEvent($data);
            break;
            
        case 'client':
            handleClientEvent($data);
            break;
            
        case 'transaction':
            handleTransactionEvent($data);
            break;
            
        default:
            logMessage("Unknown resource: $resource");
            break;
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –∑–∞–ø–∏—Å–µ–π
 */
function handleRecordEvent($data) {
    $status = $data['status'] ?? 'unknown';
    $recordData = $data['data'] ?? [];
    
    logMessage("Record event: $status - " . json_encode($recordData));
    
    switch ($status) {
        case 'create':
            handleRecordCreated($recordData);
            break;
            
        case 'update':
            handleRecordUpdated($recordData);
            break;
            
        case 'delete':
            handleRecordDeleted($recordData);
            break;
            
        default:
            logMessage("Unknown record status: $status");
            break;
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
 */
function handleRecordCreated($data) {
    logMessage('Record created: ' . json_encode($data));
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø–∏—Å–∏
    $recordId = $data['id'] ?? 'N/A';
    $clientName = $data['client']['display_name'] ?? 'N/A';
    $clientPhone = $data['client']['phone'] ?? 'N/A';
    $serviceName = $data['services'][0]['title'] ?? 'N/A';
    $staffName = $data['staff']['name'] ?? 'N/A';
    $datetime = $data['datetime'] ?? 'N/A';
    $cost = $data['services'][0]['cost'] ?? 0;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    $recordInfo = [
        'id' => $recordId,
        'client_name' => $clientName,
        'client_phone' => $clientPhone,
        'service_name' => $serviceName,
        'staff_name' => $staffName,
        'datetime' => $datetime,
        'cost' => $cost,
        'created_at' => date('Y-m-d H:i:s')
    ];
    
    file_put_contents('records.json', json_encode($recordInfo, JSON_PRETTY_PRINT) . PHP_EOL, FILE_APPEND | LOCK_EX);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    sendNotification("üìÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å", [
        'ID –∑–∞–ø–∏—Å–∏' => $recordId,
        '–ö–ª–∏–µ–Ω—Ç' => $clientName,
        '–¢–µ–ª–µ—Ñ–æ–Ω' => $clientPhone,
        '–£—Å–ª—É–≥–∞' => $serviceName,
        '–°–æ—Ç—Ä—É–¥–Ω–∏–∫' => $staffName,
        '–î–∞—Ç–∞' => $datetime,
        '–°—Ç–æ–∏–º–æ—Å—Ç—å' => $cost . ' RUB'
    ]);
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å, —Å–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
    if ($cost > 0) {
        createPaymentForRecord($data);
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
 */
function handleRecordUpdated($data) {
    logMessage('Record updated: ' . json_encode($data));
    
    sendNotification("üîÑ –ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞", [
        'ID –∑–∞–ø–∏—Å–∏' => $data['id'] ?? 'N/A',
        '–ö–ª–∏–µ–Ω—Ç' => $data['client']['display_name'] ?? 'N/A',
        '–î–∞—Ç–∞' => $data['datetime'] ?? 'N/A'
    ]);
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
 */
function handleRecordDeleted($data) {
    logMessage('Record deleted: ' . json_encode($data));
    
    sendNotification("‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞", [
        'ID –∑–∞–ø–∏—Å–∏' => $data['id'] ?? 'N/A',
        '–ö–ª–∏–µ–Ω—Ç' => $data['client']['display_name'] ?? 'N/A'
    ]);
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –≤–∏–∑–∏—Ç–æ–≤
 */
function handleVisitEvent($data) {
    $status = $data['status'] ?? 'unknown';
    $visitData = $data['data'] ?? [];
    
    logMessage("Visit event: $status - " . json_encode($visitData));
    
    switch ($status) {
        case 'create':
            handleVisitCreated($visitData);
            break;
            
        case 'update':
            handleVisitUpdated($visitData);
            break;
            
        case 'complete':
            handleVisitCompleted($visitData);
            break;
            
        default:
            logMessage("Unknown visit status: $status");
            break;
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–∑–∏—Ç–∞
 */
function handleVisitCreated($data) {
    logMessage('Visit created: ' . json_encode($data));
    
    sendNotification("‚úÖ –í–∏–∑–∏—Ç —Å–æ–∑–¥–∞–Ω", [
        'ID –≤–∏–∑–∏—Ç–∞' => $data['id'] ?? 'N/A',
        '–ö–ª–∏–µ–Ω—Ç' => $data['client']['display_name'] ?? 'N/A'
    ]);
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–∏–∑–∏—Ç–∞
 */
function handleVisitCompleted($data) {
    logMessage('Visit completed: ' . json_encode($data));
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≤–∏–∑–∏—Ç–∞
    if (isset($data['services']) && !empty($data['services'])) {
        $totalCost = 0;
        foreach ($data['services'] as $service) {
            $totalCost += $service['cost'] ?? 0;
        }
        
        if ($totalCost > 0) {
            createPaymentForVisit($data);
        }
    }
    
    sendNotification("‚úÖ –í–∏–∑–∏—Ç –∑–∞–≤–µ—Ä—à–µ–Ω", [
        'ID –≤–∏–∑–∏—Ç–∞' => $data['id'] ?? 'N/A',
        '–ö–ª–∏–µ–Ω—Ç' => $data['client']['display_name'] ?? 'N/A',
        '–°—É–º–º–∞' => $totalCost . ' RUB'
    ]);
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –∫–ª–∏–µ–Ω—Ç–æ–≤
 */
function handleClientEvent($data) {
    $status = $data['status'] ?? 'unknown';
    $clientData = $data['data'] ?? [];
    
    logMessage("Client event: $status - " . json_encode($clientData));
    
    switch ($status) {
        case 'create':
            handleClientCreated($clientData);
            break;
            
        case 'update':
            handleClientUpdated($clientData);
            break;
            
        default:
            logMessage("Unknown client status: $status");
            break;
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
 */
function handleClientCreated($data) {
    logMessage('Client created: ' . json_encode($data));
    
    sendNotification("üë§ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç", [
        'ID –∫–ª–∏–µ–Ω—Ç–∞' => $data['id'] ?? 'N/A',
        '–ò–º—è' => $data['display_name'] ?? 'N/A',
        '–¢–µ–ª–µ—Ñ–æ–Ω' => $data['phone'] ?? 'N/A'
    ]);
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
 */
function handleTransactionEvent($data) {
    $status = $data['status'] ?? 'unknown';
    $transactionData = $data['data'] ?? [];
    
    logMessage("Transaction event: $status - " . json_encode($transactionData));
    
    switch ($status) {
        case 'create':
            handleTransactionCreated($transactionData);
            break;
            
        case 'update':
            handleTransactionUpdated($transactionData);
            break;
            
        default:
            logMessage("Unknown transaction status: $status");
            break;
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π (–Ω–∞—à —Ñ–æ—Ä–º–∞—Ç)
 */
function handleCustomEvent($data) {
    $eventType = $data['event_type'];
    $eventData = $data['data'];
    
    logMessage("Custom event: $eventType");
    
    switch ($eventType) {
        case 'transaction.created':
            handleTransactionCreated($eventData);
            break;
            
        case 'payment.received':
            handlePaymentReceived($eventData);
            break;
            
        case 'payment.failed':
            handlePaymentFailed($eventData);
            break;
            
        default:
            logMessage("Unknown custom event: $eventType");
            break;
    }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏
 */
function createPaymentForRecord($recordData) {
    global $config;
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º API Altegio –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
    require_once 'altegio_payments.php';
    $payments = new AltegioPayments(
        $config['api']['user_token'], 
        $config['api']['partner_token'], 
        $config['api']['company_id']
    );
    
    // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ API
    $result = $payments->createPaymentForRecord($recordData);
    
    if ($result['success']) {
        logMessage('Payment created in Altegio for record: ' . json_encode($result['data']));
        return $result['data'];
    } else {
        logMessage('Failed to create payment in Altegio for record: ' . json_encode($result));
        return false;
    }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –≤–∏–∑–∏—Ç–∞
 */
function createPaymentForVisit($visitData) {
    global $config;
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º API Altegio –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
    require_once 'altegio_payments.php';
    $payments = new AltegioPayments(
        $config['api']['user_token'], 
        $config['api']['partner_token'], 
        $config['api']['company_id']
    );
    
    // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ API
    $result = $payments->createPaymentForVisit($visitData);
    
    if ($result['success']) {
        logMessage('Payment created in Altegio for visit: ' . json_encode($result['data']));
        return $result['data'];
    } else {
        logMessage('Failed to create payment in Altegio for visit: ' . json_encode($result));
        return false;
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
 */
function handleTransactionCreated($data) {
    logMessage('Transaction created: ' . json_encode($data));
    
    $transactionData = [
        'id' => $data['id'] ?? null,
        'client_id' => $data['client_id'] ?? null,
        'amount' => $data['amount'] ?? 0,
        'currency' => $data['currency'] ?? 'RUB',
        'payment_method' => $data['payment_method'] ?? '',
        'status' => $data['status'] ?? 'pending',
        'created_at' => date('Y-m-d H:i:s')
    ];
    
    file_put_contents('transactions.json', json_encode($transactionData, JSON_PRETTY_PRINT) . PHP_EOL, FILE_APPEND | LOCK_EX);
    
    sendNotification("üí∞ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è", [
        'ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏' => $transactionData['id'],
        '–°—É–º–º–∞' => $transactionData['amount'] . ' ' . $transactionData['currency'],
        '–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã' => $transactionData['payment_method'],
        '–°—Ç–∞—Ç—É—Å' => $transactionData['status']
    ]);
}

function handleTransactionUpdated($data) {
    logMessage('Transaction updated: ' . json_encode($data));
    
    sendNotification("üîÑ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞", [
        'ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏' => $data['id'] ?? 'N/A',
        '–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å' => $data['status'] ?? 'N/A',
        '–°—É–º–º–∞' => ($data['amount'] ?? 0) . ' ' . ($data['currency'] ?? 'RUB')
    ]);
}

function handlePaymentReceived($data) {
    logMessage('Payment received: ' . json_encode($data));
    
    sendNotification("‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω", [
        'ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏' => $data['transaction_id'] ?? 'N/A',
        '–°—É–º–º–∞' => ($data['amount'] ?? 0) . ' ' . ($data['currency'] ?? 'RUB'),
        '–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã' => $data['payment_method'] ?? 'N/A'
    ]);
}

function handlePaymentFailed($data) {
    logMessage('Payment failed: ' . json_encode($data));
    
    sendNotification("‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª", [
        'ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏' => $data['transaction_id'] ?? 'N/A',
        '–û—à–∏–±–∫–∞' => $data['error_message'] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        '–°—É–º–º–∞' => ($data['amount'] ?? 0) . ' ' . ($data['currency'] ?? 'RUB')
    ]);
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 */
function sendNotification($title, $data) {
    $message = $title . "\n\n";
    foreach ($data as $key => $value) {
        $message .= "$key: $value\n";
    }
    
    logMessage("Notification: $message");
    
    file_put_contents('notifications.txt', date('Y-m-d H:i:s') . " - $message\n", FILE_APPEND | LOCK_EX);
}
?>
