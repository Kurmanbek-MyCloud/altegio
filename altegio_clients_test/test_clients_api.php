<?php
/**
 * –¢–µ—Å—Ç API Altegio - –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
 * –ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ POST /company/{company_id}/clients/search
 */

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è API Altegio
$config = [
    'base_url' => 'https://api.alteg.io/api/v1/',
    'user_token' => 'c1d3041f2185df70f5c341f0926adb44',
    'partner_token' => 'gbkp3f4ynkd5jpejjsxp',
    'company_id' => 729142
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è Unicode —Å–∏–º–≤–æ–ª–æ–≤
function decodeUnicode($text) {
    $decoded = json_decode('"' . $text . '"');
    return $decoded !== null ? $decoded : $text;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
function logMessage($message, $clearLog = false) {
    $timestamp = date('Y-m-d H:i:s');
    
    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º Unicode —Å–∏–º–≤–æ–ª—ã –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
    $decodedMessage = decodeUnicode($message);
    
    $logEntry = "[$timestamp] $decodedMessage" . PHP_EOL;
    
    // –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    $flags = $clearLog ? 0 : (FILE_APPEND | LOCK_EX);
    file_put_contents('clients_api.log', $logEntry, $flags);
    
    echo $decodedMessage . PHP_EOL;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ API
function makeApiRequest($endpoint, $method = 'GET', $data = null) {
    global $config;
    
    $url = $config['base_url'] . ltrim($endpoint, '/');
    
    $headers = [
        'Content-Type: application/json',
        'Accept: application/vnd.api.v2+json',
        'Authorization: Bearer ' . $config['partner_token'] . ', User ' . $config['user_token']
    ];
    
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
    curl_setopt($ch, CURLOPT_TIMEOUT, 30);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);
    
    if ($method === 'POST') {
        curl_setopt($ch, CURLOPT_POST, true);
        if ($data) {
            curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
        }
    }
    
    $response = curl_exec($ch);
    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    $error = curl_error($ch);
    curl_close($ch);
    
    logMessage("API Request: $method $url - HTTP $httpCode");
    
    if ($error) {
        logMessage("cURL Error: $error");
        return ['success' => false, 'error' => $error];
    }
    
    $responseData = json_decode($response, true);
    
    if ($httpCode >= 200 && $httpCode < 300) {
        // –ö—Ä–∞—Å–∏–≤–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        $formattedResponse = json_encode($responseData, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE);
        logMessage("API Success: $formattedResponse");
        return ['success' => true, 'data' => $responseData, 'http_code' => $httpCode];
    } else {
        // –ö—Ä–∞—Å–∏–≤–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        $formattedError = json_encode($responseData, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE);
        logMessage("API Error: HTTP $httpCode - $formattedError");
        return ['success' => false, 'error' => $responseData, 'http_code' => $httpCode];
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
function getClientsList($params = []) {
    global $config;
    
    // –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    $requestData = [
        'page' => $params['page'] ?? 1,
        'page_size' => $params['page_size'] ?? 25,
        'order_by' => $params['order_by'] ?? 'id',
        'order_by_direction' => $params['order_by_direction'] ?? 'DESC',
        'operation' => $params['operation'] ?? 'AND'
    ];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    if (isset($params['fields'])) {
        $requestData['fields'] = $params['fields'];
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    if (isset($params['filters'])) {
        $requestData['filters'] = $params['filters'];
    }
    
    // –ö—Ä–∞—Å–∏–≤–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    $formattedParams = json_encode($requestData, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE);
    logMessage("Getting clients list with params: $formattedParams");
    
    $endpoint = "company/{$config['company_id']}/clients/search";
    return makeApiRequest($endpoint, 'POST', $requestData);
}

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
echo "üß™ –¢–µ—Å—Ç API Altegio - –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)\n";
echo "==================================================================\n\n";

// –û—á–∏—â–∞–µ–º –ª–æ–≥ —Ñ–∞–π–ª –≤ –Ω–∞—á–∞–ª–µ —Ç–µ—Å—Ç–∞
logMessage("=== –ù–ê–ß–ê–õ–û –ù–û–í–û–ì–û –¢–ï–°–¢–ê ===", true);

// –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å (–ø–µ—Ä–≤—ã–µ 25 –∫–ª–∏–µ–Ω—Ç–æ–≤)
echo "1Ô∏è‚É£ –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å (–ø–µ—Ä–≤—ã–µ 25 –∫–ª–∏–µ–Ω—Ç–æ–≤)\n";
$result1 = getClientsList();
if ($result1['success']) {
    echo "‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤\n";
    $clients = $result1['data']['data'] ?? [];
    echo "üìä –ù–∞–π–¥–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: " . count($clients) . "\n";
    echo "üìÑ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: " . ($result1['data']['meta']['total_count'] ?? 'N/A') . "\n\n";
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 3 –∫–ª–∏–µ–Ω—Ç–æ–≤
    if (!empty($clients)) {
        echo "üë• –ü–µ—Ä–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã:\n";
        for ($i = 0; $i < min(3, count($clients)); $i++) {
            $client = $clients[$i];
            $name = $client['name'] ?? 'N/A';
            
            // –î–µ–∫–æ–¥–∏—Ä—É–µ–º Unicode —Å–∏–º–≤–æ–ª—ã –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
            $decodedName = decodeUnicode($name);
            
            echo "   " . ($i + 1) . ". ID: " . ($client['id'] ?? 'N/A') . 
                 ", –ò–º—è: " . $decodedName . "\n";
        }
        echo "\n";
    }
} else {
    echo "‚ùå –û—à–∏–±–∫–∞: " . json_encode($result1['error']) . "\n\n";
}

// –¢–µ—Å—Ç 2: –ó–∞–ø—Ä–æ—Å —Å –≤—ã–±–æ—Ä–∫–æ–π –ø–æ–ª–µ–π
echo "2Ô∏è‚É£ –ó–∞–ø—Ä–æ—Å —Å –≤—ã–±–æ—Ä–∫–æ–π –ø–æ–ª–µ–π\n";
$result2 = getClientsList([
    'page_size' => 10,
    'fields' => ['id', 'name', 'phone', 'email']
]);
if ($result2['success']) {
    echo "‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ —Å –≤—ã–±–æ—Ä–∫–æ–π –ø–æ–ª–µ–π\n";
    $clients = $result2['data']['data'] ?? [];
    echo "üìä –ù–∞–π–¥–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: " . count($clients) . "\n";
    
    if (!empty($clients)) {
        echo "üë• –ö–ª–∏–µ–Ω—Ç—ã —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:\n";
        foreach ($clients as $client) {
            $name = $client['name'] ?? 'N/A';
            $phone = $client['phone'] ?? 'N/A';
            $email = $client['email'] ?? 'N/A';
            
            // –î–µ–∫–æ–¥–∏—Ä—É–µ–º Unicode —Å–∏–º–≤–æ–ª—ã –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
            $decodedName = decodeUnicode($name);
            
            echo "   ID: " . ($client['id'] ?? 'N/A') . 
                 ", –ò–º—è: " . $decodedName . 
                 ", –¢–µ–ª–µ—Ñ–æ–Ω: " . $phone . 
                 ", Email: " . $email . "\n";
        }
        echo "\n";
    }
} else {
    echo "‚ùå –û—à–∏–±–∫–∞: " . json_encode($result2['error']) . "\n\n";
}

// –¢–µ—Å—Ç 3: –ó–∞–ø—Ä–æ—Å —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ –¥–∞—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∏–∑–∏—Ç–∞
echo "3Ô∏è‚É£ –ó–∞–ø—Ä–æ—Å —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ –¥–∞—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∏–∑–∏—Ç–∞\n";
$result3 = getClientsList([
    'page_size' => 5,
    'order_by' => 'last_visit_date',
    'order_by_direction' => 'DESC',
    'fields' => ['id', 'name', 'phone', 'last_visit_date']
]);
if ($result3['success']) {
    echo "‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π\n";
    $clients = $result3['data']['data'] ?? [];
    echo "üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã:\n";
            foreach ($clients as $client) {
            $name = $client['name'] ?? 'N/A';
            $lastVisit = $client['last_visit_date'] ?? 'N/A';
            
            // –î–µ–∫–æ–¥–∏—Ä—É–µ–º Unicode —Å–∏–º–≤–æ–ª—ã –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
            $decodedName = decodeUnicode($name);
            
            echo "   ID: " . ($client['id'] ?? 'N/A') . 
                 ", –ò–º—è: " . $decodedName . 
                 ", –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–∑–∏—Ç: " . $lastVisit . "\n";
        }
    echo "\n";
} else {
    echo "‚ùå –û—à–∏–±–∫–∞: " . json_encode($result3['error']) . "\n\n";
}

// –¢–µ—Å—Ç 4: –ó–∞–ø—Ä–æ—Å —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
echo "4Ô∏è‚É£ –ó–∞–ø—Ä–æ—Å —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ 2)\n";
$result4 = getClientsList([
    'page' => 2,
    'page_size' => 10,
    'order_by' => 'id'
]);
if ($result4['success']) {
    echo "‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ 2\n";
    $clients = $result4['data']['data'] ?? [];
    echo "üìä –ö–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ 2: " . count($clients) . "\n";
    echo "üìÑ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: " . ($result4['data']['meta']['total_count'] ?? 'N/A') . "\n\n";
} else {
    echo "‚ùå –û—à–∏–±–∫–∞: " . json_encode($result4['error']) . "\n\n";
}

// –¢–µ—Å—Ç 5: –ó–∞–ø—Ä–æ—Å —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ –∏–º–µ–Ω–∏
echo "5Ô∏è‚É£ –ó–∞–ø—Ä–æ—Å —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ –∏–º–µ–Ω–∏ (–ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é)\n";
$result5 = getClientsList([
    'page_size' => 5,
    'order_by' => 'name',
    'order_by_direction' => 'ASC',
    'fields' => ['id', 'name', 'phone']
]);
if ($result5['success']) {
    echo "‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ –∏–º–µ–Ω–∏\n";
    $clients = $result5['data']['data'] ?? [];
    echo "üìä –ö–ª–∏–µ–Ω—Ç—ã –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É:\n";
            foreach ($clients as $client) {
            $name = $client['name'] ?? 'N/A';
            $phone = $client['phone'] ?? 'N/A';
            
            // –î–µ–∫–æ–¥–∏—Ä—É–µ–º Unicode —Å–∏–º–≤–æ–ª—ã –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
            $decodedName = decodeUnicode($name);
            
            echo "   ID: " . ($client['id'] ?? 'N/A') . 
                 ", –ò–º—è: " . $decodedName . 
                 ", –¢–µ–ª–µ—Ñ–æ–Ω: " . $phone . "\n";
        }
    echo "\n";
} else {
    echo "‚ùå –û—à–∏–±–∫–∞: " . json_encode($result5['error']) . "\n\n";
}

// –¢–µ—Å—Ç 6: –ó–∞–ø—Ä–æ—Å —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
echo "6Ô∏è‚É£ –ó–∞–ø—Ä–æ—Å —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã (200)\n";
$result6 = getClientsList([
    'page_size' => 200,
    'order_by' => 'id',
    'fields' => ['id', 'name']
]);
if ($result6['success']) {
    echo "‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º\n";
    $clients = $result6['data']['data'] ?? [];
    echo "üìä –ü–æ–ª—É—á–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: " . count($clients) . "\n";
    echo "üìÑ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: " . ($result6['data']['meta']['total_count'] ?? 'N/A') . "\n\n";
} else {
    echo "‚ùå –û—à–∏–±–∫–∞: " . json_encode($result6['error']) . "\n\n";
}

echo "üìä –ò—Ç–æ–≥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n";
echo "=====================\n";
echo "‚Ä¢ –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å: " . ($result1['success'] ? "‚úÖ –£—Å–ø–µ—Ö" : "‚ùå –û—à–∏–±–∫–∞") . "\n";
echo "‚Ä¢ –í—ã–±–æ—Ä–∫–∞ –ø–æ–ª–µ–π: " . ($result2['success'] ? "‚úÖ –£—Å–ø–µ—Ö" : "‚ùå –û—à–∏–±–∫–∞") . "\n";
echo "‚Ä¢ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ: " . ($result3['success'] ? "‚úÖ –£—Å–ø–µ—Ö" : "‚ùå –û—à–∏–±–∫–∞") . "\n";
echo "‚Ä¢ –ü–∞–≥–∏–Ω–∞—Ü–∏—è: " . ($result4['success'] ? "‚úÖ –£—Å–ø–µ—Ö" : "‚ùå –û—à–∏–±–∫–∞") . "\n";
echo "‚Ä¢ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∏–º–µ–Ω–∏: " . ($result5['success'] ? "‚úÖ –£—Å–ø–µ—Ö" : "‚ùå –û—à–∏–±–∫–∞") . "\n";
echo "‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: " . ($result6['success'] ? "‚úÖ –£—Å–ø–µ—Ö" : "‚ùå –û—à–∏–±–∫–∞") . "\n\n";

echo "üí° –í—ã–≤–æ–¥—ã:\n";
echo "==========\n";
echo "1. ‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–ª—è –±–∞–∑–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤\n";
echo "2. ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤—ã–±–æ—Ä–∫–∞ –ø–æ–ª–µ–π (fields)\n";
echo "3. ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–∞–∑–Ω—ã–º –ø–æ–ª—è–º\n";
echo "4. ‚úÖ –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç\n";
echo "5. ‚ùå –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è\n";
echo "6. ‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã: 200\n\n";

echo "üîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:\n";
echo "===============================\n";
echo "1. –í—Å–µ–≥–¥–∞ —É–∫–∞–∑—ã–≤–∞–π—Ç–µ 'fields' –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏\n";
echo "2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'page_size' –¥–æ 200 –¥–ª—è –±–æ–ª—å—à–∏—Ö –≤—ã–±–æ—Ä–æ–∫\n";
echo "3. –°–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –ø–æ 'last_visit_date' –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤\n";
echo "4. –õ–æ–≥–∏—Ä—É–π—Ç–µ –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏\n\n";

echo "üìù –õ–æ–≥ —Ñ–∞–π–ª: clients_api.log\n";
?> 